---
description: 
globs: *.astro
alwaysApply: false
---
### Guidelines for Astro

- Configure for static site generation (SSG) with `output: "static"`
- Leverage View Transitions API for smooth page transitions (use ClientRouter)
- Use content collections with type safety for blog posts, documentation, etc.
- For API communication, use the configured API client from `src/lib/api/client.ts`
- Extract API logic into services in `src/lib/` utilities
- Use image optimization with the Astro Image integration
- Implement client-side data fetching in React components for dynamic content
- Use `client:load` or `client:visible` for interactive components
- Leverage import.meta.env for environment variables (especially BACKEND_URL)
- Use Astro.cookies for client-side cookie management
- Implement proper error boundaries for API failures
- Use TypeScript interfaces for API response types
- The project generates static HTML/CSS/JS files that can be deployed to any static hosting
- All API calls are made client-side from React components
- No server-side rendering for API data - use client-side hydration

### Layout Integration

- Import React components using the new component architecture: `import { AppWrapper } from "../components"`
- Use clean imports from component index files
- Maintain separation between Astro layouts and React components
- Keep Astro layouts focused on static structure and meta tags
