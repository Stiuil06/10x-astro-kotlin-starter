/* tslint:disable */
/* eslint-disable */
/**
 * 10x Project API
 * API specification for the 10x Project monorepo with authentication and role-based access
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DecisionLogResponse,
  ErrorResponse,
  GetStatus200Response,
  LoginRequest,
  LoginResponse,
} from '../models/index';
import {
    DecisionLogResponseFromJSON,
    DecisionLogResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetStatus200ResponseFromJSON,
    GetStatus200ResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponseFromJSON,
    LoginResponseToJSON,
} from '../models/index';

export interface GetDecisionLogRequest {
    page?: number;
    size?: number;
    sort?: GetDecisionLogSortEnum;
    category?: string;
    status?: GetDecisionLogStatusEnum;
}

export interface LoginOperationRequest {
    loginRequest: LoginRequest;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * Returns data accessible to administrator role
     * @summary Get administrator data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAdministratorDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Returns data accessible to administrator role
     * Get administrator data
     */
    getAdministratorData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Returns paginated list of community decisions
     * @summary Get decision log
     * @param {number} [page] Page number (0-based)
     * @param {number} [size] Page size
     * @param {'date' | 'category' | 'status'} [sort] Sort field
     * @param {string} [category] Filter by category
     * @param {'active' | 'completed' | 'cancelled'} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDecisionLogRaw(requestParameters: GetDecisionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DecisionLogResponse>>;

    /**
     * Returns paginated list of community decisions
     * Get decision log
     */
    getDecisionLog(requestParameters: GetDecisionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DecisionLogResponse>;

    /**
     * Returns data accessible to mieszkaniec role
     * @summary Get mieszkaniec data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMieszkaniecDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Returns data accessible to mieszkaniec role
     * Get mieszkaniec data
     */
    getMieszkaniecData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Returns application health status
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStatus200Response>>;

    /**
     * Returns application health status
     * Health check
     */
    getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStatus200Response>;

    /**
     * Returns data accessible to zarzad role
     * @summary Get zarzad data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getZarzadDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Returns data accessible to zarzad role
     * Get zarzad data
     */
    getZarzadData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Authenticate user and receive JWT token
     * @summary User login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>>;

    /**
     * Authenticate user and receive JWT token
     * User login
     */
    login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Returns data accessible to administrator role
     * Get administrator data
     */
    async getAdministratorDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/administrator`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns data accessible to administrator role
     * Get administrator data
     */
    async getAdministratorData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getAdministratorDataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns paginated list of community decisions
     * Get decision log
     */
    async getDecisionLogRaw(requestParameters: GetDecisionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DecisionLogResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/mieszkaniec/decision-log`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DecisionLogResponseFromJSON(jsonValue));
    }

    /**
     * Returns paginated list of community decisions
     * Get decision log
     */
    async getDecisionLog(requestParameters: GetDecisionLogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DecisionLogResponse> {
        const response = await this.getDecisionLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data accessible to mieszkaniec role
     * Get mieszkaniec data
     */
    async getMieszkaniecDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/mieszkaniec`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns data accessible to mieszkaniec role
     * Get mieszkaniec data
     */
    async getMieszkaniecData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getMieszkaniecDataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns application health status
     * Health check
     */
    async getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStatus200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/_status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns application health status
     * Health check
     */
    async getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStatus200Response> {
        const response = await this.getStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns data accessible to zarzad role
     * Get zarzad data
     */
    async getZarzadDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/zarzad`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns data accessible to zarzad role
     * Get zarzad data
     */
    async getZarzadData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getZarzadDataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate user and receive JWT token
     * User login
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate user and receive JWT token
     * User login
     */
    async login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetDecisionLogSortEnum = {
    Date: 'date',
    Category: 'category',
    Status: 'status'
} as const;
export type GetDecisionLogSortEnum = typeof GetDecisionLogSortEnum[keyof typeof GetDecisionLogSortEnum];
/**
 * @export
 */
export const GetDecisionLogStatusEnum = {
    Active: 'active',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;
export type GetDecisionLogStatusEnum = typeof GetDecisionLogStatusEnum[keyof typeof GetDecisionLogStatusEnum];
