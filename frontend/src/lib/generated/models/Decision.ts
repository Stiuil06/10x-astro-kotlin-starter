/* tslint:disable */
/* eslint-disable */
/**
 * 10x Project API
 * API specification for the 10x Project monorepo with authentication and role-based access
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Votes } from './Votes';
import {
    VotesFromJSON,
    VotesFromJSONTyped,
    VotesToJSON,
    VotesToJSONTyped,
} from './Votes';

/**
 * 
 * @export
 * @interface Decision
 */
export interface Decision {
    /**
     * Unique decision identifier
     * @type {string}
     * @memberof Decision
     */
    id: string;
    /**
     * Decision title
     * @type {string}
     * @memberof Decision
     */
    title: string;
    /**
     * Decision description
     * @type {string}
     * @memberof Decision
     */
    description: string;
    /**
     * Decision creation date
     * @type {Date}
     * @memberof Decision
     */
    date: Date;
    /**
     * Decision approval date
     * @type {Date}
     * @memberof Decision
     */
    approvalDate?: Date;
    /**
     * Decision category
     * @type {string}
     * @memberof Decision
     */
    category: string;
    /**
     * Decision status
     * @type {string}
     * @memberof Decision
     */
    status: DecisionStatusEnum;
    /**
     * 
     * @type {Votes}
     * @memberof Decision
     */
    votes: Votes;
    /**
     * List of document filenames
     * @type {Array<string>}
     * @memberof Decision
     */
    documents?: Array<string>;
}


/**
 * @export
 */
export const DecisionStatusEnum = {
    Active: 'active',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;
export type DecisionStatusEnum = typeof DecisionStatusEnum[keyof typeof DecisionStatusEnum];


/**
 * Check if a given object implements the Decision interface.
 */
export function instanceOfDecision(value: object): value is Decision {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('votes' in value) || value['votes'] === undefined) return false;
    return true;
}

export function DecisionFromJSON(json: any): Decision {
    return DecisionFromJSONTyped(json, false);
}

export function DecisionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Decision {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'],
        'date': (new Date(json['date'])),
        'approvalDate': json['approvalDate'] == null ? undefined : (new Date(json['approvalDate'])),
        'category': json['category'],
        'status': json['status'],
        'votes': VotesFromJSON(json['votes']),
        'documents': json['documents'] == null ? undefined : json['documents'],
    };
}

export function DecisionToJSON(json: any): Decision {
    return DecisionToJSONTyped(json, false);
}

export function DecisionToJSONTyped(value?: Decision | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'date': ((value['date']).toISOString().substring(0,10)),
        'approvalDate': value['approvalDate'] == null ? undefined : ((value['approvalDate']).toISOString().substring(0,10)),
        'category': value['category'],
        'status': value['status'],
        'votes': VotesToJSON(value['votes']),
        'documents': value['documents'],
    };
}

